replicaCount: 1
revisionHistoryLimit: 0
deploymentStrategy:
  type: RollingUpdate

## PodDisruptionBudget
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget
# maxUnavailable: 1

image:
  repository: snipe/snipe-it
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

service:
  type: ClusterIP
  annotations: {}

config:
  mysql:
  ## All of these values are only used when mysql.enabled is set to false
    externalDatabase:
      user: "snipeit"
      pass: ""
      name: db-snipeit
      host: mysql
      port: 3306
      ## Setting `...SecretName` and `...SecretKey` will override previous configurations"
      # userSecretName: user-example
      # userSecretKey: user-key-example
      # passSecretName: pass-example
      # passSecretKey: pass-key-example
      # hostSecretName: host-example
      # hostSecretKey: host-key-example
      # portSecretName: port-example
      # portSecretKey: port-key-example
      # nameSecretName: dbname-example
      # nameSecretKey: dbname-key-example

  snipeit:
    env: production
    debug: false
    url: http://example.local
    key: ""
    ## Setting `keySecretName` and `keySecretKey` will override key configuration"
    # keySecretName: ""
    # keySecretKey: ""
    timezone: Europe/Berlin
    locale: en
    envConfig: {}
  ## Name of the secret containing the database connection details
  ## kubectl create secret generic my-db-secret \
  ##   --from-literal=MYSQL_USER=<your_mysql_user> \
  ##   --from-literal=MYSQL_DATABASE=<your_mysql_database> \
  ##   --from-literal=MYSQL_PASSWORD=<your_mysql_password> \
  ##   --from-literal=MYSQL_PORT_3306_TCP_ADDR=<your_mysql_host> \
  ##   --from-literal=MYSQL_PORT_3306_TCP_PORT=<your_mysql_port> \
  ##   --from-literal=APP_KEY=<your_app_key>

  externalSecrets: ""
mysql:
  ## Whether to deploy a mysql server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  enabled: false
  ## Create a database and a database user
  ##
  mysqlUser: snipeit
  mysqlPassword: "snipeit"
  mysqlDatabase: db-snipeit

  persistence:
    enabled: true
      ## mysql data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi

persistence:
  enabled: true
  annotations: {}
  accessMode: ReadWriteOnce
  existingClaim: ""
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  size: 2Gi

  www:
    mountPath: /var/lib/snipeit
    subPath: www
  sessions:
    mountPath: /var/www/html/storage/framework/sessions
    subPath: sessions

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  pathType: ImplementationSpecific
  hosts:
    - example.local
  tls: []
  #  - secretName: example-local
  #    hosts:
  #      - example.local

mysql-backup:
  enabled: false

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

extraAnnotations: {}
  # Extra Annotations that will be added to the SnipeIT Pod(s)
  # app.kubernetes.io/instance: snipeit
extraManifests: []

extraVolumeMounts: []
  # Additional volumeMounts to the container
  # - name: secrets-store01-inline
  #   mountPath: /mnt/secrets-store

extraVolumes: []
  # Additional volumes to the pod
  # - csi:
  #   driver: secrets-store.csi.k8s.io
  #   readOnly: true
  #   volumeAttributes:
  #     secretProviderClass: "secret-csi-provider"
  #  name : secrets-store01-inline
